destroy_marnaus_decision = {
	picture = "gfx/interface/illustrations/decisions/decision_destroy_marnaus.dds"
	major = yes

	ai_check_interval = 120

	desc = destroy_marnaus_decision_desc
	selection_tooltip = destroy_marnaus_decision_tooltip

	is_shown = {
		is_ruler = yes
		is_landed = yes
		exists = dynasty # Everyone should have a dynasty, but in case they don't...
		character:marnaus = { 
			limit = {
				is_alive = yes
			}	
		}
		OR = {
			culture = { has_cultural_pillar = heritage_greintvaldian}
		}
		NOT = {	#You can only do it once.
			is_target_in_global_variable_list = {
				name = unavailable_unique_decisions
				target = flag:flag_destroyed_marnaus
			}
		}
	}

	is_valid = {
		is_independent_ruler = yes
		prestige_level >= medium_prestige_level
		has_title = title:e_greintvald
	}

	is_valid_showing_failures_only = {
		is_available_adult = yes
	}

	effect = {
		show_as_tooltip = {
			destroy_marnaus_decision_scripted_effect = yes
		}
		save_scope_as = destroyer
		trigger_event = {
			id = marnaus.0001
		}
		#Notify other players.
		every_player = {
			limit = {
				NOT = { this = root }
				is_within_diplo_range = { CHARACTER = root }
			}
			trigger_event = marnaus.0002
		}
		hidden_effect = {
			add_to_global_variable_list = {
				name = unavailable_unique_decisions
				target = flag:flag_destroyed_marnaus
			}
			set_global_variable = {
				name = flag_destroyed_marnaus
				value = root
			}
		}
	}

	cost = {
		gold = 500
		prestige = 1000
	}

	ai_potential = {
		always = yes
	}

	ai_will_do = {
		base = 100
	}
}



recreate_kerrandin = {
	picture = "gfx/interface/illustrations/decisions/decision_realm.dds"

	major = yes				
	ai_goal = yes 				

	sort_order = 255			

	is_shown = { 
        is_landed = yes
		is_imprisoned = no
        primary_title ?= {
            tier == tier_duchy
        }
        culture = {
            OR = {
                this = culture:kerrandinian
                any_parent_culture_or_above = {
                    this = culture:kerrandinian
                }
            }
        }
 		NOT = {
 			is_target_in_global_variable_list = {
 				name = unavailable_unique_decisions
 				target = flag:flag_formed_kingdom_of_kerrandin
 			}
 		}     
    }				
    
	is_valid = { 
        prestige_level >= 2        

        custom_tooltip = {
            text = DATAW_unite_clayne_tribes_conquest_tooltip_trig

            ruler_owns_kerrandin_counties >= 90_percent_of_kerrandin_land
        }             
    }

	cost = {						
		gold = 200
		prestige = 1000        
	}

	effect = { 
		create_title_and_vassal_change = {
			type = created
			save_scope_as = change
		}
		title:k_kerrandin = {
			change_title_holder = {
				holder = root
				change = scope:change
			}
		}
		resolve_title_and_vassal_change = scope:change        
        add_character_flag = united_kerrandin # unique death loc
        hidden_effect = {
			create_title_and_vassal_change = {
				type = conquest_claim
				save_scope_as = change_two
				#add_claim_on_loss = yes
			}
			#every_ally = {
			#	change_liege = {
			#		liege = root
			#		change = scope:change_two
			#	}
			#}
			resolve_title_and_vassal_change = scope:change_two    

            every_ruler = {
                limit = {
                    culture = {
                        OR = {
                            this = culture:kerrandinian
                            any_parent_culture_or_above = {
                                this = culture:kerrandinian
                            }
                        }
                    }
                }
                primary_title = {
                    remove_variable = kerrandinian_land_owned
                }
                remove_global_variable = kerrandinian_land_total
            }

            set_culture = culture:kerrandinian

        }                    

		add_to_global_variable_list = {
			name = unavailable_unique_decisions
			target = flag:flag_formed_kingdom_of_kerrandin
		}
		set_global_variable = {
			name = flag_formed_kingdom_of_kerrandin
			value = scope:founder
		}


        #trigger_event = DATAW_major_decision.0003        
    }			

	ai_potential = { 
        always = yes
    }			
	ai_will_do = { base = 100 }		
}